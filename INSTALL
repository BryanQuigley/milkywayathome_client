
Linux:

1. Install dependencies

   Ubuntu / Debian:

    (Note: apt-get build-dep boinc-app-milkyway for Debian. I'm not sure it's actually helpful anyway)

    # Make sure the necessary build tools are installed
    $ apt-get build-essential
    $ apt-get install libpopt-dev cmake autoconf automake libtool git-core subversion diffutils patch
    $ apt-get build-dep boinc-app-milkyway boinc-client boinc-manager boinc-dev

  Other Distributions: Install equivalent packages.

  Arch: Most/all? dependencies can be installed by installing the
        boinc package.

     $ pacman -S boinc

2. Checkout BOINC

 $ svn co http://boinc.berkeley.edu/svn/trunk/boinc

3. Build BOINC

  I had a little bit trouble getting this to build, but it's easiest
  to only compile the libraries which are all we need.

  3.1 Run their silly wrapper script around autools which shouldn't
  exist:

    cd to the boinc checkout

    $ ./_autosetup

    If this fails complaining about a missing libtoolize, edit
    _autosetup and remove/comment out the block checking for
    libtoolize.

  3.2 Run standard autoconf stuff, enabling only the libraries. The
      enabling debugging is optional, but for this purpose recommended.

    $ ./configure --disable-client --disable-server --enable-optimize
    $ make
    $ sudo make install


4. Compile the milkyway client
 4.1 Check it out

   $ git clone git://github.com/Milkyway-at-home/milkywayathome_client.git

   Or if you have your SSH and github tokens etc. set up,

   $ git clone git@github.com:Milkyway-at-home/milkywayathome_client.git

  4.2 Use cmake to generate makefiles

      Navigate to the git checkout, and run

      $ cmake .

  4.3 Compile

     $ make

  Note if you need to change the compiler, and some other settings in
  cmake, you must delete CMakeCache.txt.

  4.4 The client should now be build with an executable in bin/ and a
      library in lib/

Note: If you do try to build the client, and you have a recent
GNOME/Gtk/Glib/GIO install, you need the latest development version of
wxWidgets installed.

--------------------------------------------------------------------------------

OS X:

1. Install Xcode and the Apple developer tools. This may involve joining some sort of cult.
2. Install macports
3. Install dependencies by running:

  $ port install cmake popt git-core autoconf automake

4. Continue from step 3 of the Linux instructions.

--------------------------------------------------------------------------------

Windows:

Be prepared for pain.

1. Visual Studio 2010 works for the separation, but not the N-body.

2. Your best bet for all dependencies is to somehow get binaries and
   headers, and install them to the prefix of your checkout. i.e. put
   libraries in milkywayathome_client/lib and headers in milkywayathome_client/include.

2.

  MinGW:

    Install with the latest mingw-get-inst installer
      http://sourceforge.net/projects/mingw/files/Automated%20MinGW%20Installer/mingw-get-inst/

    Start the MinGW MSYS shell, and run $ mingw-get update
    Install stuff with mingw-get install <packagename>



3. Install the BOINC libraries

  3.1 Get svn working somehow in some sort of shell. Maybe use
       TortoiseSVN or whatever if all else fails.
       $ svn co http://boinc.berkeley.edu/svn/trunk/boinc


  3.3 Compile the BOINC libraries

      Go to the lib subdirectory of the your boinc source checkout.

      $ cd boinc/lib

      Compile them.

      $ make -f Makefile.mingw

      Assuming there were no errors, install them

      $ make -f Makefile.mingw install

      Now you should have the BOINC libraries installed.

4. Compile the milkyway client

  4.1 If you installed git from

    Checking out from the read-only URL:

    $ git clone git://github.com/arsenm/milkywayathome_client.git

    Or if you have your SSH and github tokens etc. set up,

    $ git clone git@github.com:arsenm/milkywayathome_client.git

  4.2 Use cmake to generate makefiles

      Navigate to the git checkout, and run

      $ cmake . -G "MSYS Makefiles"

  4.3 Compile

     $ make

  Note if you need to change the compiler, and some other settings in
  cmake, you must delete CMakeCache.txt.

  4.4 The client should now be build with an exe in bin/ and a
      library in lib/


--------------------------------------------------------------------------------


Nbody:

You must install Lua.

Building Lua as a static library prevents dynamic module loading on Windows,
which we don't need and we almost don't want it to work anyway. It's
also a good idea to build your own Lua on Windows (32 bit) just to be
sure all math is SSE2.


Install "Lua for Windows" http://code.google.com/p/luaforwindows/
This is primarily to get a standalone Lua interpreter installed which
some of the tests use. Additionally it can be used for a 32-bit build,
but that would also require shipping the DLL.



Build Crlibm from: git://github.com/Milkyway-at-home/crlibm.git



OpenSSL is used by the N-body, but only for tests.

MSYS/Mingw32:

  $ cmake . -G "MSYS Makefiles"
  $ make


MinGW64:
  Install OpenSSL for Win64:
    - Install MSVC++ redistributables:
       http://www.microsoft.com/downloads/details.aspx?familyid=bd2a6171-e2d6-4230-b809-9a8d7548c1b6
    - Install OpenSSL itself:
      http://www.slproweb.com/download/Win64OpenSSL-1_0_0d.exe

    - Copy these: DLLs from their default install location
        C:\OpenSSL-Win64\libeay32.dll
        C:\OpenSSL-Win64\ssleay32.dll
      to milkywayathome_client/lib directory to avoid finding the 32 bit libraries.


  $ cmake . -G "MinGW Makefiles"
  $ mingw32-make


--------------------------------------------------------------------------------

New MinGW directions to install everything:

To build 32 bit version, add -m32 to the CFLAGS when building
anything. For the builds using cmake, add -DCMAKE_C_FLAGS="-m32"
-DCMAKE_CXX_FLAGS="-m32" to the cmake build line.

1. Install TDM GCC, the 64 bit full version.
2. Install SlikSVN
3. Install msys-git

Make sure all the installers add themselves to the PATH.

4. Start the MinGW64 shell

5. Get milkywayathome_client
    > git clone git://github.com/Milkyway-at-home/milkywayathome_client.git

6. Decide if you're going to do an in or out of source build. If
    you're doing an in source build, PATH_TO_MILKYWAY_BUILD_OUTPUT will be
    the same as where your checkout is. Otherwise it's wherever you're building.

6.Get BOINC:
    > svn co http://boinc.berkeley.edu/svn/tags/<some version here>
     or if necessary (right now you need trunk for mingw build to work)
    > svn co http://boinc.berkeley.edu/svn/trunk/boinc

7. Build BOINC
    > cd boinc\lib
    > mingw32-make -f Makefile.mingw

8. Install BOINC somewhere useful.

  If you're feeling inspired to do something useful, you can fix "make
  install" for BOINC with the MinGW makefile. It can be made to work
  with MSYS, but these directions aren't using it.

  Actually much better, replace the 5 or so build systems which BOINC
  currently has with a single cmake one.

  There are 3 static libraries you need:
    boinc\lib\libboinc.a
    boinc\lib\libboinc_api.a
    boinc\lib\libboinc_graphics2.a

    Copy the librariesto ${PATH_TO_MILKYWAY_BUILD_OUTPUT}/lib
    Copy the headers to ${PATH_TO_MILKYWAY_BUILD_OUTPUT}/include/boinc

    The headers should be the ones listed in Makefile.mingw as install
    headers. If you're lazy like me you can just copy all of the
    headers in boinc\lib and in boinc\api


9. Get POPT:
    My fork should build with MinGW32/MinGW64 and MSVC
        > git clone git://github.com/arsenm/POPT.git
        > cmake ${PATH_TO_POPT} -G "MinGW Makefiles" -DCMAKE_INSTALL_PREFIX=${PATH_TO_MILKYWAY_BUILD_OUTPUT}
        > mingw32-make
        > mingw32-make install

10. Get Lua.
     Notes:
         a. If you want to do a 32 bit build, add the -m32 to MYCFLAGS in ${LUA_SRC_DIR}/src/Makefile

         b. If want static liblua.a to not need to ship a separate DLL, (and losing the ability to load packages which we
             don't need) you need to change ${LUA_SRC_DIR}/src/Makefile to not build as a DLL.

   > mingw32-make mingw

    Again make install doesn't really work, so manually copy stuff again:
    Copy src/liblua.a (and maybe ALSO lua51.dll depending on what you did) to ${PATH_TO_MILKYWAY_BUILD_OUTPUT}/lib
    Copy these headers from src/ to ${PATH_TO_MILKYWAY_BUILD_OUTPUT}/include
        lauxlib.h
        lua.h
        luaconf.h
        lualib.h


11. Get crlibm
    > git clone git://github.com/Milkyway-at-home/crlibm.git
    > cd crlibm
    > cmake -G "MinGW Makefiles" -DCMAKE_INSTALL_PREFIX=${PATH_TO_MILKYWAY_BUILD_OUTPUT}
    > mingw32-make
    > mingw32-make install

12. Try building it
      > cd ${PATH_TO_MILKYWAY_BUILD_OUTPUT}
      > cmake -G "MinGW Makefiles" ${PATH_TO_MILKYWAY_SOURCE}

      For an in source build that would probably be
      > cmake -G "MinGW Makefiles" .
      > mingw32-make



